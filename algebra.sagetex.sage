## -*- encoding: utf-8 -*-
## This file (algebra.sagetex.sage) was *autogenerated* from algebra.tex with sagetex.sty version 2015/08/26 v3.0-92d9f7a.
import sagetex
_st_ = sagetex.SageTeXProcessor('algebra', version='2015/08/26 v3.0-92d9f7a', version_check=True)
_st_.current_tex_line = 555
_st_.blockbegin()
try:
 gcd(1200,1040)
except:
 _st_.goboom(557)
_st_.blockend()
try:
 _st_.current_tex_line = 558
 _st_.inline(0, latex(gcd(1200,1040)))
except:
 _st_.goboom(558)
_st_.current_tex_line = 560
_st_.blockbegin()
try:
 lcm(1200,1040)
except:
 _st_.goboom(562)
_st_.blockend()
try:
 _st_.current_tex_line = 564
 _st_.inline(1, latex(lcm(1200,1040)))
except:
 _st_.goboom(564)
_st_.current_tex_line = 567
_st_.blockbegin()
try:
 12345*13579
except:
 _st_.goboom(569)
_st_.blockend()
try:
 _st_.current_tex_line = 570
 _st_.inline(2, latex(12345*13579))
except:
 _st_.goboom(570)
_st_.current_tex_line = 574
_st_.blockbegin()
try:
 x=4
 y=7
 x*y
except:
 _st_.goboom(578)
_st_.blockend()
try:
 _st_.current_tex_line = 579
 _st_.inline(3, latex(x*y))
except:
 _st_.goboom(579)
_st_.current_tex_line = 583
_st_.blockbegin()
try:
 gcd([3800,7600,1900])
except:
 _st_.goboom(585)
_st_.blockend()
try:
 _st_.current_tex_line = 586
 _st_.inline(4, latex(gcd([3800,7600,1900])))
except:
 _st_.goboom(586)
_st_.current_tex_line = 254
_st_.blockbegin()
try:
 def f(n):
     return 2*n+1
except:
 _st_.goboom(257)
_st_.blockend()
_st_.current_tex_line = 262
_st_.blockbegin()
try:
 f(3)
except:
 _st_.goboom(264)
_st_.blockend()
try:
 _st_.current_tex_line = 265
 _st_.inline(5, latex(f(3)))
except:
 _st_.goboom(265)
_st_.current_tex_line = 268
_st_.blockbegin()
try:
 def g(x,y):
     return x*y+2
except:
 _st_.goboom(271)
_st_.blockend()
_st_.current_tex_line = 275
_st_.blockbegin()
try:
 def sum_of_integers(n):
     if n<=0:
         return 0
     else:
         return n+sum_of_integers(n-1)
except:
 _st_.goboom(281)
_st_.blockend()
try:
 _st_.current_tex_line = 282
 _st_.inline(6, latex(sum_of_integers(5)))
except:
 _st_.goboom(282)
_st_.current_tex_line = 298
_st_.blockbegin()
try:
 for n in [0..10]:
     print(n,3^n-2^(n+1))
except:
 _st_.goboom(301)
_st_.blockend()
_st_.current_tex_line = 324
_st_.blockbegin()
try:
 def my_gcd(a, b):
     while b<>0:
         a,b=b,a%b
     return a
except:
 _st_.goboom(329)
_st_.blockend()
_st_.current_tex_line = 331
_st_.blockbegin()
try:
 def gcd_by_subtraction(a, b):
     if a<0:
         a=-a
     if b<0:
         b=-b
     if a==0:
         return b
     if b==0:
         return a
     while a<>b:
         if a>b:
             a=a-b
         else:
             b=b-a
     return a
except:
 _st_.goboom(347)
_st_.blockend()
try:
 _st_.current_tex_line = 357
 _st_.inline(7, latex([6]+[2]))
except:
 _st_.goboom(357)
_st_.current_tex_line = 367
_st_.blockbegin()
try:
 def reverse(L):
     n=len(L)
     if n<=1:
         return L
     else:
         return L[n-1:n]+reverse(L[0:n-1])
except:
 _st_.goboom(374)
_st_.blockend()
_st_.current_tex_line = 376
_st_.blockbegin()
try:
 L=range(0,10)
 print(L)
except:
 _st_.goboom(379)
_st_.blockend()
try:
 _st_.current_tex_line = 380
 _st_.inline(8, latex(L))
except:
 _st_.goboom(380)
_st_.current_tex_line = 381
_st_.blockbegin()
try:
 print(reverse(L))
except:
 _st_.goboom(383)
_st_.blockend()
try:
 _st_.current_tex_line = 384
 _st_.inline(9, latex(reverse(L)))
except:
 _st_.goboom(384)
_st_.current_tex_line = 387
_st_.blockbegin()
try:
 def fibonacci_list(n):
     L=[1,1]
     for i in range(2,n):
         L=L+[L[i-1]+L[i-2]]
     return L
except:
 _st_.goboom(393)
_st_.blockend()
try:
 _st_.current_tex_line = 394
 _st_.inline(10, latex(fibonacci_list(10)))
except:
 _st_.goboom(394)
_st_.current_tex_line = 184
_st_.blockbegin()
try:
 def bezpretty(b,c):
     p,q,r=1,0,b
     s,t,u=0,1,c
     M = matrix([[p,q,r],[s,t,u]])
     result="\\begin{align*}\n"
     result=result+"&{}\\\\ ".format(latex(M))
     while u<>0:
         if abs(r)>abs(u):
             p,q,r,s,t,u=s,t,u,p,q,r
         Q=u//r
         s,t,u=s-Q*p,t-Q*q,u-Q*r
         M = matrix([[p,q,r],[s,t,u]])
         result=result+"&{}\\\\ \n ".format(latex(M))
     result=result+"&({})({})+({})({})={}\\\\ \n ".format(p,b,q,c,r)
     result=result+"\\end{align*}"
     return result
except:
 _st_.goboom(201)
_st_.blockend()
try:
 _st_.current_tex_line = 377
 _st_.inline(11, latex(xgcd(12,8)))
except:
 _st_.goboom(377)
_st_.current_tex_line = 379
_st_.blockbegin()
try:
 def bez(b,c):
     p,q,r=1,0,b
     s,t,u=0,1,c
     while u<>0:
         if abs(r)>abs(u):
             p,q,r,s,t,u=s,t,u,p,q,r
         Q=u//r
         s,t,u=s-Q*p,t-Q*q,u-Q*r
     return r,p,q
except:
 _st_.goboom(389)
_st_.blockend()
_st_.current_tex_line = 396
_st_.blockbegin()
try:
 def row_with_nonzero_entry_in_final_column(A,rows,columns,starting_from_row=0):
     for i in range(starting_from_row,rows):
         if A[i,columns-1]<>0:
             return i
     return rows
except:
 _st_.goboom(402)
_st_.blockend()
_st_.current_tex_line = 405
_st_.blockbegin()
try:
 def bez(L):
     n=len(L)
     A=matrix(n,n+1)
     for i in range(0,n):
         for j in range(0,n):
             if i==j:
                 A[i,j]=1
             else:
                 A[i,j]=0
                 A[i,n]=L[i]
     k=row_with_nonzero_entry_in_final_column(A,n,n+1)
     l=row_with_nonzero_entry_in_final_column(A,n,n+1,k+1)
     while l<n:
         if abs(A[l,n])>abs(A[k,n]):
             k,l=l,k
         q=A[k,n]//A[l,n]
         for j in range(0,n+1):
             A[k,j]=A[k,j]-q*A[l,j]
         k=row_with_nonzero_entry_in_final_column(A,n,n+1)
         l=row_with_nonzero_entry_in_final_column(A,n,n+1,k+1)
     return ([A[k,j] for j in range(0,n)],A[k,n])
except:
 _st_.goboom(427)
_st_.blockend()
_st_.current_tex_line = 437
_st_.blockbegin()
try:
 R=bez([-2*3*5,2*3*7,2*3*11])
except:
 _st_.goboom(439)
_st_.blockend()
try:
 _st_.current_tex_line = 440
 _st_.inline(12, latex(R))
except:
 _st_.goboom(440)
try:
 _st_.current_tex_line = 440
 _st_.inline(13, latex(R[0]))
except:
 _st_.goboom(440)
try:
 _st_.current_tex_line = 440
 _st_.inline(14, latex(R[1]))
except:
 _st_.goboom(440)
try:
 _st_.current_tex_line = 182
 _st_.inline(15, latex(next_prime(2005)))
except:
 _st_.goboom(182)
try:
 _st_.current_tex_line = 191
 _st_.inline(16, latex(prime_pi(10^6)))
except:
 _st_.goboom(191)
_st_.current_tex_line = 198
_st_.blockbegin()
try:
 p=plot(prime_pi, 0, 10000, rgbcolor='red')
 q=plot(x/(-1+log(x)), 5, 10000, rgbcolor='blue')
 show(p+q)
except:
 _st_.goboom(202)
_st_.blockend()
_st_.current_tex_line = 883
_st_.blockbegin()
try:
 a=mod(71,13)
except:
 _st_.goboom(885)
_st_.blockend()
try:
 _st_.current_tex_line = 887
 _st_.inline(17, latex(a))
except:
 _st_.goboom(887)
try:
 _st_.current_tex_line = 887
 _st_.inline(18, latex(a^2))
except:
 _st_.goboom(887)
_st_.current_tex_line = 890
_st_.blockbegin()
try:
 euler_phi(777)
except:
 _st_.goboom(892)
_st_.blockend()
try:
 _st_.current_tex_line = 893
 _st_.inline(19, latex(euler_phi(777)))
except:
 _st_.goboom(893)
_st_.current_tex_line = 895
_st_.blockbegin()
try:
 inverse_mod(14,19)
except:
 _st_.goboom(897)
_st_.blockend()
try:
 _st_.current_tex_line = 899
 _st_.inline(20, latex(inverse_mod(14,19)))
except:
 _st_.goboom(899)
_st_.current_tex_line = 902
_st_.blockbegin()
try:
 def phi(n):
     return prod(p^a-p^(a-1) for (p,a) in factor(n))
except:
 _st_.goboom(905)
_st_.blockend()
try:
 _st_.current_tex_line = 906
 _st_.inline(21, latex(phi(666)))
except:
 _st_.goboom(906)
_st_.current_tex_line = 915
_st_.blockbegin()
try:
 crt([1,2],[3,7])
except:
 _st_.goboom(917)
_st_.blockend()
try:
 _st_.current_tex_line = 918
 _st_.inline(22, latex(crt([1,2],[3,7])))
except:
 _st_.goboom(918)
_st_.current_tex_line = 921
_st_.blockbegin()
try:
 a=mod(9,17)
 a^(-1)
except:
 _st_.goboom(924)
_st_.blockend()
try:
 _st_.current_tex_line = 925
 _st_.inline(23, latex(a^(-1)))
except:
 _st_.goboom(925)
_st_.current_tex_line = 927
_st_.blockbegin()
try:
 b=mod(7,17)
 a*b
except:
 _st_.goboom(930)
_st_.blockend()
try:
 _st_.current_tex_line = 931
 _st_.inline(24, latex(a*b))
except:
 _st_.goboom(931)
_st_.current_tex_line = 181
_st_.blockbegin()
try:
 ord('A')
except:
 _st_.goboom(183)
_st_.blockend()
try:
 _st_.current_tex_line = 184
 _st_.inline(25, latex(ord('A')))
except:
 _st_.goboom(184)
_st_.current_tex_line = 187
_st_.blockbegin()
try:
 m = "HELLO WORLD"
 m = map(ord, m)
 m
except:
 _st_.goboom(191)
_st_.blockend()
try:
 _st_.current_tex_line = 193
 _st_.inline(26, latex(m))
except:
 _st_.goboom(193)
_st_.current_tex_line = 195
_st_.blockbegin()
try:
 m.reverse()
 m
except:
 _st_.goboom(198)
_st_.blockend()
try:
 _st_.current_tex_line = 200
 _st_.inline(27, latex(m))
except:
 _st_.goboom(200)
_st_.current_tex_line = 202
_st_.blockbegin()
try:
 ZZ(m,100)
except:
 _st_.goboom(204)
_st_.blockend()
_st_.current_tex_line = 206
_st_.blockbegin()
try:
 x=ZZ(m,100)
 x
except:
 _st_.goboom(209)
_st_.blockend()
_st_.current_tex_line = 213
_st_.blockbegin()
try:
 p=993319
 q=999331
 d=13
 m=p*q
 f=euler_phi(m)
 e=inverse_mod(d,f)
except:
 _st_.goboom(220)
_st_.blockend()
_st_.current_tex_line = 223
_st_.blockbegin()
try:
 y=power_mod(x, d, m)
 y
except:
 _st_.goboom(226)
_st_.blockend()
try:
 _st_.current_tex_line = 227
 _st_.inline(28, latex(y))
except:
 _st_.goboom(227)
_st_.current_tex_line = 232
_st_.blockbegin()
try:
 x=power_mod(y, e, m)
 x
except:
 _st_.goboom(235)
_st_.blockend()
try:
 _st_.current_tex_line = 236
 _st_.inline(29, latex(x))
except:
 _st_.goboom(236)
_st_.current_tex_line = 239
_st_.blockbegin()
try:
 def recover_message(x):
     if x==0:
         return ""
     else:
         return recover_message(x//100)+chr(x%100)
except:
 _st_.goboom(245)
_st_.blockend()
_st_.current_tex_line = 247
_st_.blockbegin()
try:
 print(recover_message(x))
except:
 _st_.goboom(249)
_st_.blockend()
_st_.current_tex_line = 266
_st_.blockbegin()
try:
 7/2+5/3
except:
 _st_.goboom(268)
_st_.blockend()
try:
 _st_.current_tex_line = 269
 _st_.inline(30, latex(7/2+5/3))
except:
 _st_.goboom(269)
_st_.current_tex_line = 271
_st_.blockbegin()
try:
 sqrt(27)
except:
 _st_.goboom(273)
_st_.blockend()
try:
 _st_.current_tex_line = 274
 _st_.inline(31, latex(sqrt(27)))
except:
 _st_.goboom(274)
_st_.current_tex_line = 278
_st_.blockbegin()
try:
 sqrt(27.0)
except:
 _st_.goboom(280)
_st_.blockend()
try:
 _st_.current_tex_line = 281
 _st_.inline(32, latex(sqrt(27.0)))
except:
 _st_.goboom(281)
_st_.current_tex_line = 283
_st_.blockbegin()
try:
 numerical_approx(pi, digits=50)
except:
 _st_.goboom(285)
_st_.blockend()
try:
 _st_.current_tex_line = 288
 _st_.inline(33, latex(numerical_approx(pi, digits=50)))
except:
 _st_.goboom(288)
_st_.current_tex_line = 292
_st_.blockbegin()
try:
 z=3+4*i
 real_part(z)
except:
 _st_.goboom(295)
_st_.blockend()
_st_.current_tex_line = 321
_st_.blockbegin()
try:
 x = var('x')
except:
 _st_.goboom(323)
_st_.blockend()
_st_.current_tex_line = 325
_st_.blockbegin()
try:
 solve(x^2 + 3*x + 2, x)
except:
 _st_.goboom(327)
_st_.blockend()
_st_.current_tex_line = 330
_st_.blockbegin()
try:
 x=var('x')
 factor(x^2-1)
except:
 _st_.goboom(333)
_st_.blockend()
_st_.current_tex_line = 336
_st_.blockbegin()
try:
 x, y = var('x, y')
 solve([x+y==6, x-y==4], x, y)
except:
 _st_.goboom(339)
_st_.blockend()
_st_.current_tex_line = 342
_st_.blockbegin()
try:
 x=var('x')
 b=x^3+x^2
 c=x^2+x
 gcd(b,c)
except:
 _st_.goboom(347)
_st_.blockend()
try:
 _st_.current_tex_line = 348
 _st_.inline(34, latex(gcd(b,c)))
except:
 _st_.goboom(348)
_st_.current_tex_line = 351
_st_.blockbegin()
try:
 R.<x> = PolynomialRing(QQ)
 b=x^3+x^2
 c=x^2+x
 b.quo_rem(c)
except:
 _st_.goboom(356)
_st_.blockend()
try:
 _st_.current_tex_line = 357
 _st_.inline(35, latex(b.quo_rem(c)))
except:
 _st_.goboom(357)
_st_.current_tex_line = 359
_st_.blockbegin()
try:
 xgcd(x^4-x^2,x^3-x)
except:
 _st_.goboom(361)
_st_.blockend()
try:
 _st_.current_tex_line = 362
 _st_.inline(36, latex(xgcd(x^4-x^2,x^3-x)))
except:
 _st_.goboom(362)
_st_.current_tex_line = 366
_st_.blockbegin()
try:
 R.<x> = PolynomialRing(GF(5))
 b=x^3+x^2+1
 c=x^2+x+1
 b.quo_rem(c)
except:
 _st_.goboom(371)
_st_.blockend()
try:
 _st_.current_tex_line = 372
 _st_.inline(37, latex(b.quo_rem(c)))
except:
 _st_.goboom(372)
_st_.current_tex_line = 376
_st_.blockbegin()
try:
 def bezpoly(b,c):
     p,q,r=1,0,b
     s,t,u=0,1,c
     while u<>0:
         if r.degree()>u.degree():
             p,q,r,s,t,u=s,t,u,p,q,r
         Q=u//r
         s,t,u=s-Q*p,t-Q*q,u-Q*r
     return (r,p,q)
except:
 _st_.goboom(386)
_st_.blockend()
_st_.current_tex_line = 388
_st_.blockbegin()
try:
 R.<t> = PolynomialRing(QQ)
 f=(2*t+1)*(t+1)*(t-1)
 g=(2*t+1)*(t-1)*t^2
 bezpoly(f,g)
except:
 _st_.goboom(393)
_st_.blockend()
try:
 _st_.current_tex_line = 395
 _st_.inline(38, latex(bezpoly(f,g)))
except:
 _st_.goboom(395)
_st_.current_tex_line = 103
_st_.blockbegin()
try:
 t=var('t')
 p=t^5-2*t+7
except:
 _st_.goboom(106)
_st_.blockend()
try:
 _st_.current_tex_line = 107
 _st_.inline(39, latex(p.list()))
except:
 _st_.goboom(107)
_st_.current_tex_line = 110
_st_.blockbegin()
try:
 def descartes(p):
     sign = 0
     sign_changes = 0
     for c in p.list():
         if c <> 0:
             if sign == 0:
                 if c < 0:
                     sign = -1
                 else:
                     if c > 0:
                         sign = 1
             else:
                 if c*sign < 0:
                     sign_changes = sign_changes + 1
                     sign = -sign
     return sign_changes
except:
 _st_.goboom(127)
_st_.blockend()
_st_.current_tex_line = 132
_st_.blockbegin()
try:
 t = var('t')
 descartes(t^(79)-4*t^(17)+t^(10)+t^6+t-1)
except:
 _st_.goboom(135)
_st_.blockend()
try:
 _st_.current_tex_line = 136
 _st_.inline(40, latex(descartes(t^(79)-4*t^(17)+t^(10)+t^6+t-1)))
except:
 _st_.goboom(136)
_st_.current_tex_line = 230
_st_.blockbegin()
try:
 def count_sign_changes(L):
     n=0
     for i in range(0,len(L)-1):
         if L[i]*L[i+1]<0:
             n=n+1
     return n
 def expected_number_of_zeroes(p,a,b):
     if p == 0:
         return oo
         # Returns infinity
     # Create a list called L containing the Sturm sequence.
     L = [p,diff(p(x),x)]
     n = 2
     q,r=L[n-2].quo_rem(L[n-1])
     while r!=0:
         # Every nonzero remainder r gets -r stuck in the Sturm sequence.
         L.append(-r)
         n=n+1
         q,r=L[n-2].quo_rem(L[n-1])
     # Make a list A of values of the Sturm sequence polynomials at x=a.
     A=[]
     # Make a list B of values of the Sturm sequence polynomials at x=b.
     B=[]
     for i in range(0,n):
         A.append(L[i].subs(x=a))
         B.append(L[i].subs(x=b))
     return count_sign_changes(A)-count_sign_changes(B)
except:
 _st_.goboom(258)
_st_.blockend()
_st_.current_tex_line = 260
_st_.blockbegin()
try:
 R.<x>=PolynomialRing(QQ)
 b=(x-1)*x*(x+1)^3
 expected_number_of_zeroes(b,0,1)
except:
 _st_.goboom(264)
_st_.blockend()
try:
 _st_.current_tex_line = 265
 _st_.inline(41, latex(expected_number_of_zeroes(b,0,1)))
except:
 _st_.goboom(265)
_st_.current_tex_line = 441
_st_.blockbegin()
try:
 x=var('x')
 f = 4/(x^2+2*x-3)
 f.partial_fraction(x)
except:
 _st_.goboom(445)
_st_.blockend()
try:
 _st_.current_tex_line = 446
 _st_.inline(42, latex(f.partial_fraction(x)))
except:
 _st_.goboom(446)
_st_.current_tex_line = 513
_st_.blockbegin()
try:
 integral((1/x)+(x-1)/x^3,x)
except:
 _st_.goboom(515)
_st_.blockend()
try:
 _st_.current_tex_line = 516
 _st_.inline(43, latex(integral((1/x)+(x-1)/x^3,x)))
except:
 _st_.goboom(516)
_st_.current_tex_line = 103
_st_.blockbegin()
try:
 R.<x> = PolynomialRing(QQ)
 b=x^3+x+2
 b.is_irreducible()
except:
 _st_.goboom(107)
_st_.blockend()
try:
 _st_.current_tex_line = 108
 _st_.inline(44, latex(b.is_irreducible()))
except:
 _st_.goboom(108)
try:
 _st_.current_tex_line = 109
 _st_.inline(45, latex(factor(b)))
except:
 _st_.goboom(109)
_st_.current_tex_line = 111
_st_.blockbegin()
try:
 R.<x> = PolynomialRing(GF(2))
 b=x^3+x+2
 b.is_irreducible()
except:
 _st_.goboom(115)
_st_.blockend()
try:
 _st_.current_tex_line = 116
 _st_.inline(46, latex(b.is_irreducible()))
except:
 _st_.goboom(116)
try:
 _st_.current_tex_line = 116
 _st_.inline(47, latex(factor(b)))
except:
 _st_.goboom(116)
_st_.current_tex_line = 191
_st_.blockbegin()
try:
 R.<x> = PolynomialRing(ZZ)
except:
 _st_.goboom(193)
_st_.blockend()
_st_.current_tex_line = 195
_st_.blockbegin()
try:
 def prime_factors(x):
     x=abs(x)
     list=[]
     p=2
     while p<=x:
         if x%p==0:
             list=list+[p]
             while x%p==0:
                 x=x//p
         p=p+1
     return list
except:
 _st_.goboom(207)
_st_.blockend()
_st_.current_tex_line = 211
_st_.blockbegin()
try:
 def Eisenstein(b):
     c=b.coefficients()
     highest=c.pop()
     possible_primes=prime_factors(gcd(c))
     for p in possible_primes:
         if (highest%p<>0) and (c[0]%(p^2)<>0):
             return p
     return 0
except:
 _st_.goboom(220)
_st_.blockend()
_st_.current_tex_line = 222
_st_.blockbegin()
try:
 Eisenstein(2*x^8+27*x^4+3*x^2+6)
except:
 _st_.goboom(224)
_st_.blockend()
try:
 _st_.current_tex_line = 225
 _st_.inline(48, latex(Eisenstein(2*x^8+27*x^4+3*x^2+6)))
except:
 _st_.goboom(225)
_st_.current_tex_line = 120
_st_.blockbegin()
try:
 P.<x> = PolynomialRing(QQ)
 a=x^3+x+7
 b=x^2+2
 a.resultant(b)
except:
 _st_.goboom(125)
_st_.blockend()
try:
 _st_.current_tex_line = 126
 _st_.inline(49, latex(a.resultant(b)))
except:
 _st_.goboom(126)
_st_.current_tex_line = 130
_st_.blockbegin()
try:
 def resultant(b,c):
     B=b.list()
     C=c.list()
     m=len(B)-1
     n=len(C)-1
     A=matrix(m+n,m+n)
     for j in range(0,n):
         for i in range(0,m+n):
             if (0<=i-j) and (i-j<=m):
                 A[i,j]=B[i-j]
             else:
                 A[i,j]=0
     for j in range(n,m+n):
         for i in range(0,m+n):
             if (0<=i-j+n) and (i-j+n<=n):
                 A[i,j]=C[i-j+n]
             else:
                 A[i,j]=0
     return det(A)
except:
 _st_.goboom(150)
_st_.blockend()
_st_.current_tex_line = 152
_st_.blockbegin()
try:
 t=var('t')
 p = t^2+2*t+1
 q = t+1
 resultant(p,q)
except:
 _st_.goboom(157)
_st_.blockend()
try:
 _st_.current_tex_line = 158
 _st_.inline(50, latex(resultant(p,q)))
except:
 _st_.goboom(158)
_st_.current_tex_line = 460
_st_.blockbegin()
try:
 R.<x> = PolynomialRing(QQ)
 def fastresultant(b,c):
     m=b.degree()
     n=c.degree()
     if m<n:
         return (-1)^(m*n)*fastresultant(c,b)
     if n==0:
         if m==0:
             return 1
         return c(0)^m
     lb=b.leading_coefficient()
     lc=c.leading_coefficient()
     B=b/lb
     C=c/lc
     r=B % C
     if (r==0):
         return 0
     return (-1)^(m*n)*lb^n*lc^m*fastresultant(C,r)
except:
 _st_.goboom(479)
_st_.blockend()
try:
 _st_.current_tex_line = 480
 _st_.inline(51, latex(fastresultant(x^3+x+7,x^2+2)))
except:
 _st_.goboom(480)
_st_.current_tex_line = 647
_st_.blockbegin()
try:
 R.<t> = PolynomialRing(QQ)
 (t^2-t+7).discriminant()
except:
 _st_.goboom(650)
_st_.blockend()
try:
 _st_.current_tex_line = 651
 _st_.inline(52, latex((t^2-t+7).discriminant()))
except:
 _st_.goboom(651)
_st_.current_tex_line = 775
_st_.blockbegin()
try:
 P.<x,y> = PolynomialRing(QQ)
 a = x + y
 b = x^3 - y^3
 a.resultant(b)
except:
 _st_.goboom(780)
_st_.blockend()
try:
 _st_.current_tex_line = 781
 _st_.inline(53, latex(a.resultant(b)))
except:
 _st_.goboom(781)
try:
 _st_.current_tex_line = 782
 _st_.inline(54, latex(a.resultant(b, y)))
except:
 _st_.goboom(782)
_st_.current_tex_line = 785
_st_.blockbegin()
try:
 R.<x,y,t> = PolynomialRing(QQ)
 (t^2-1-x).resultant(t*(t^2-1)-y,t)
except:
 _st_.goboom(788)
_st_.blockend()
try:
 _st_.current_tex_line = 789
 _st_.inline(55, latex((t^2-1-x).resultant(t*(t^2-1)-y,t)))
except:
 _st_.goboom(789)
_st_.current_tex_line = 198
_st_.blockbegin()
try:
 G = SymmetricGroup(5)
 sigma = G("(1,3) (2,5,4)")
 rho = G([(2,4), (1,5)])
 rho^(-1) * sigma * rho
except:
 _st_.goboom(203)
_st_.blockend()
try:
 _st_.current_tex_line = 204
 _st_.inline(56, latex(rho^(-1) * sigma * rho))
except:
 _st_.goboom(204)
_st_.current_tex_line = 281
_st_.blockbegin()
try:
 H = DihedralGroup(6)
 H.list()
except:
 _st_.goboom(284)
_st_.blockend()
_st_.current_tex_line = 448
_st_.blockbegin()
try:
 H = SymmetricGroup(6)
 H.is_abelian()
except:
 _st_.goboom(451)
_st_.blockend()
try:
 _st_.current_tex_line = 452
 _st_.inline(57, latex(H.is_abelian()))
except:
 _st_.goboom(452)
_st_.current_tex_line = 547
_st_.blockbegin()
try:
 H = DihedralGroup(6)
 H.cayley_table()
except:
 _st_.goboom(550)
_st_.blockend()
_st_.current_tex_line = 620
_st_.blockbegin()
try:
 G = SymmetricGroup(5)
 sigma = G("(1,3) (2,5,4)")
 sigma.order()
except:
 _st_.goboom(624)
_st_.blockend()
try:
 _st_.current_tex_line = 625
 _st_.inline(58, latex(sigma.order()))
except:
 _st_.goboom(625)
_st_.current_tex_line = 662
_st_.blockbegin()
try:
 H = DihedralGroup(6)
 show(H.cayley_graph())
except:
 _st_.goboom(665)
_st_.blockend()
_st_.current_tex_line = 1069
_st_.blockbegin()
try:
 A4 = AlternatingGroup(4)
 r1 = A4("(1,2) (3,4)")
 r2 = A4("(1,3) (2,4)")
 r3 = A4("(1,4) (2,3)")
 H = A4.subgroup([r1, r2, r3])
 H.is_normal(A4)
except:
 _st_.goboom(1076)
_st_.blockend()
try:
 _st_.current_tex_line = 1077
 _st_.inline(59, latex(H.is_normal(A4)))
except:
 _st_.goboom(1077)
_st_.current_tex_line = 1095
_st_.blockbegin()
try:
 A4 = AlternatingGroup(4)
 r1 = A4("(1,2) (3,4)")
 r2 = A4("(1,3) (2,4)")
 r3 = A4("(1,4) (2,3)")
 H = A4.subgroup([r1, r2, r3])
 A4.quotient(H)
except:
 _st_.goboom(1102)
_st_.blockend()
try:
 _st_.current_tex_line = 1103
 _st_.inline(60, latex(A4.quotient(H)))
except:
 _st_.goboom(1103)
_st_.current_tex_line = 426
_st_.blockbegin()
try:
 P.<w,x,y,z>=PolynomialRing(QQ)
 S=SymmetricFunctions(QQ)
 e=S.e()
except:
 _st_.goboom(430)
_st_.blockend()
_st_.current_tex_line = 434
_st_.blockbegin()
try:
 f = w^2+x^2+y^2+z^2+w*x+w*y+w*z+x*y+x*z+y*z
 e.from_polynomial(f)
except:
 _st_.goboom(437)
_st_.blockend()
try:
 _st_.current_tex_line = 438
 _st_.inline(61, latex(e.from_polynomial(f)))
except:
 _st_.goboom(438)
_st_.current_tex_line = 440
_st_.blockbegin()
try:
 q = e[2,1]+e[3]
 q.expand(4,alphabet=['w','x','y','z'])
except:
 _st_.goboom(443)
_st_.blockend()
try:
 _st_.current_tex_line = 446
 _st_.inline(62, latex(q.expand(4,alphabet=['w','x','y','z'])))
except:
 _st_.goboom(446)
_st_.current_tex_line = 275
_st_.blockbegin()
try:
 R.<x> = PolynomialRing(GF(2))
 K.<a> = (x^2 + x + 1).splitting_field()
 S.<t> = PolynomialRing(K)
 p = S((a*t+1)^2*(a*t-1)^2)
 q = S((a*t+1)*(a*t+a^2)^2)
 print(p.gcd(q))
 print(p.resultant(q))
except:
 _st_.goboom(283)
_st_.blockend()
try:
 _st_.current_tex_line = 284
 _st_.inline(63, latex(p.gcd(q)))
except:
 _st_.goboom(284)
try:
 _st_.current_tex_line = 284
 _st_.inline(64, latex(p.resultant(q)))
except:
 _st_.goboom(284)
_st_.current_tex_line = 25
_st_.blockbegin()
try:
 R.<x,y> = PolynomialRing(QQ)
 T.<z> = PolynomialRing(QQ)
 phi = R.hom([z^3, 0],T)
 phi(x^2+y^2)
except:
 _st_.goboom(30)
_st_.blockend()
try:
 _st_.current_tex_line = 31
 _st_.inline(65, latex(phi(x^2+y^2)))
except:
 _st_.goboom(31)
_st_.current_tex_line = 234
_st_.blockbegin()
try:
 R.<x,y>=PolynomialRing(QQ)
 R.ideal( [x^3,y^3+x^3] )
except:
 _st_.goboom(237)
_st_.blockend()
_st_.current_tex_line = 239
_st_.blockbegin()
try:
 R.ideal( [x^3,y^3+x^3] )==R.ideal( [x^3,y^3] )
except:
 _st_.goboom(241)
_st_.blockend()
try:
 _st_.current_tex_line = 242
 _st_.inline(66, latex(R.ideal( [x^3,y^3+x^3] )==R.ideal( [x^3,y^3] )))
except:
 _st_.goboom(242)
_st_.current_tex_line = 311
_st_.blockbegin()
try:
 R.<x,y> = PolynomialRing(GF(7))
 k=R.fraction_field()
 S.<t> = PolynomialRing(k)
 p=S(x*t+t^2/t)
 q=S(y*t+1)
 p.resultant(q)
except:
 _st_.goboom(318)
_st_.blockend()
_st_.current_tex_line = 415
_st_.blockbegin()
try:
 x,y=var('x,y')
 contour_plot(y^3+x^3-6*x^2*y==0, (x,-10,10), (y,-10,10))
except:
 _st_.goboom(418)
_st_.blockend()
_st_.current_tex_line = 425
_st_.blockbegin()
try:
 x,y=var('x,y')
 contour_plot(y^2-x*(x-1)*(x-2)==0, (x,-3,4), (y,-5,5))
except:
 _st_.goboom(428)
_st_.blockend()
_st_.current_tex_line = 434
_st_.blockbegin()
try:
 f(x,y) = y^2-x*(x-1)*(x-2)
 implicit_plot(f, (-3, 4), (-5, 5))
except:
 _st_.goboom(437)
_st_.blockend()
_st_.current_tex_line = 443
_st_.blockbegin()
try:
 f(x,y,z) = y^2-x*(x-1)*(x-2)+z^4-1
 implicit_plot3d(f, (-3, 4), (-5, 5), (-1,1))
except:
 _st_.goboom(446)
_st_.blockend()
_st_.current_tex_line = 186
_st_.blockbegin()
try:
 R.<x,y> = PolynomialRing(QQ)
 I = R.ideal([x^2*y,x*y^3])
 S.<a,b> = R.quotient_ring(I)
 (a+b)^4
except:
 _st_.goboom(191)
_st_.blockend()
try:
 _st_.current_tex_line = 192
 _st_.inline(67, latex((a+b)^4))
except:
 _st_.goboom(192)
_st_.current_tex_line = 195
_st_.blockbegin()
try:
 R.<x,y> = PolynomialRing(QQ)
 I = R.ideal([y^2])
 S.<a,b> = R.quotient_ring(I)
 T.<z> = PolynomialRing(QQ)
 phi = S.hom([z^3, 0],T)
 phi(a^2+b^2)
except:
 _st_.goboom(202)
_st_.blockend()
try:
 _st_.current_tex_line = 203
 _st_.inline(68, latex(phi(a^2+b^2)))
except:
 _st_.goboom(203)
_st_.current_tex_line = 422
_st_.blockbegin()
try:
 R.<x> = PolynomialRing(GF(2))
 K.<a> = (x^2 + x + 1).splitting_field()
except:
 _st_.goboom(425)
_st_.blockend()
_st_.current_tex_line = 427
_st_.blockbegin()
try:
 S=[0,1,a,a+1]
 print("Addition table:")
 for i in range(0,4):
     for j in range(0,4):
         print("({})+({})={}".format(S[i],S[j],S[i]+S[j]))
 print("Multiplication table:")
 for i in range(0,4):
     for j in range(0,4):
         print("({})*({})={}".format(S[i],S[j],S[i]*S[j]))
except:
 _st_.goboom(437)
_st_.blockend()
_st_.current_tex_line = 31
_st_.blockbegin()
try:
 R.<x,y,z> = PolynomialRing(QQ)
 p = x^3+x*y+1
 p.homogenize(z)
except:
 _st_.goboom(35)
_st_.blockend()
try:
 _st_.current_tex_line = 36
 _st_.inline(69, latex(p.homogenize(z)))
except:
 _st_.goboom(36)
_st_.current_tex_line = 484
_st_.blockbegin()
try:
 def ldegree(f):
     minimum = infinity
     for (n, m) in f.dict():
         minimum = min(minimum, n)
     return minimum
except:
 _st_.goboom(490)
_st_.blockend()
_st_.current_tex_line = 492
_st_.blockbegin()
try:
 def determine_variables(b, c):
     if len(b.variables()) == 2:
         return b.variables()
     if len(c.variables()) == 2:
         return c.variables()
     if len(b.variables()) == len(c.variables()) == 1:
         if b.variables() == c.variables():
             return (b.variable(0), 0)
         else:
             return (c.variable(0), b.variable(0))
     return (0,0)
except:
 _st_.goboom(504)
_st_.blockend()
_st_.current_tex_line = 506
_st_.blockbegin()
try:
 def intersection_number(b, c, point = (0,0)):
     (x,y) = determine_variables(b, c)
     # translate both curves to origin and calculate it there
     b = b.subs({x:x + point[0], y:y + point[1]})
     c = c.subs({x:x + point[0], y:y + point[1]})
     # if $b(0,0)\neq 0$ or $c(0,0)\neq 0$ they don't intersect in the origin
     if b.subs({x:0, y:0}) != 0 or c.subs({x:0, y:0}) != 0:
         return 0
     # if $b$ or $c$ are zero they don't intersect properly
     if b == 0 or c == 0:
         return Infinity
     # we only look at factors of $x$
     f = b.subs({y:0})
     g = c.subs({y:0})
     # $b$ contains a component $y=0$
     if f == 0:
         # $c$ contains a component $y=0$ too, no proper intersection
         if c == 0:
             return infinity
         # remove common $y^n$ in $b$, count degree of $x$ in $c$ and recurse
         else:
             f = b.quo_rem(y)[0]
             return ldegree(g) + intersection_number(f, c)
     # $b$ does not contain a component $y=0$
     else:
         # $c$ *does* contain a component $y=0$
         if g == 0:
             g = c.quo_rem(y)[0]
             return ldegree(f) + intersection_number(b, g)
         # we recurse by removing factors of $x$
         else:
             p, q = f.lc(), g.lc()
             r, s = f.degree(), g.degree()
             # we drop the highest degree term
             if r <= s:
                 return intersection_number(b, p*c - q*x^(s-r)*b)
             else:
                 return intersection_number(q*b - p*x^(r-s)*c, c)
except:
 _st_.goboom(545)
_st_.blockend()
_st_.current_tex_line = 547
_st_.blockbegin()
try:
 P.<x,y> = PolynomialRing(QQ)
 b = P(x^2+y^2)^2+3*x^2*y-y^3
 c = P(x^2+y^2)^3-4*x^2*y^2
 intersection_number(b,c)
except:
 _st_.goboom(552)
_st_.blockend()
try:
 _st_.current_tex_line = 553
 _st_.inline(70, latex(intersection_number(b,c)))
except:
 _st_.goboom(553)
_st_.current_tex_line = 53
_st_.blockbegin()
try:
 X=-35/100
 Y=sqrt((X+1)*X*(X-1))
 # The slope of the tangent line is given by implicit differentation.
 M=(3*X^2-1)/(2*Y)
 # Write the equation of the curve restricted to the tangent line.
 x=var('x')
 f=(Y+M*(x-X))^2-(x+1)*x*(x-1)
 print("The tangent line strikes the curve at ",solve(f,x))
 XX=(201601/196560)
 YY=-sqrt((XX+1)*XX*(XX-1))
 print("The other intersection point is ",XX.n(),YY.n())
 plot(f,x,-2,2)
except:
 _st_.goboom(66)
_st_.blockend()
_st_.current_tex_line = 32
_st_.blockbegin()
try:
 P.<x,y,z> = PolynomialRing(QQ)
 b = x^3-y^2*z+z^3
 Hb = matrix([[diff(b,x,x),diff(b,x,y),diff(b,x,z)],
              [diff(b,x,y),diff(b,y,y),diff(b,y,z)],
              [diff(b,x,z),diff(b,y,z),diff(b,z,z)]])
 factor(Hb.det())
except:
 _st_.goboom(39)
_st_.blockend()
try:
 _st_.current_tex_line = 40
 _st_.inline(71, latex(latex(factor(Hb.det()))))
except:
 _st_.goboom(40)
_st_.current_tex_line = 273
_st_.blockbegin()
try:
 y=var('y')
 z=var('z')
 r=var('r')
 f = function('f')(x,y,z)
 g = function('g')(x,z)
 b(x,y,z) = y * f(x,y,z) + x^(r+2)*g(x,z)
 m=matrix([
         [diff(b(x,y,z),x,x),diff(b(x,y,z),x,y),diff(b(x,y,z),x,z)],
         [diff(b(x,y,z),x,y),diff(b(x,y,z),y,y),diff(b(x,y,z),y,z)],
         [diff(b(x,y,z),x,z),diff(b(x,y,z),y,z),diff(b(x,y,z),z,z)]])
 h=m.det()
 factor(simplify(expand((h.subs(y=0)/x^r).subs(x=0))))
except:
 _st_.goboom(286)
_st_.blockend()
try:
 _st_.current_tex_line = 287
 _st_.inline(72, latex(latex(factor(simplify(expand((h.subs(y=0)/x^r).subs(x=0)))))))
except:
 _st_.goboom(287)
try:
 _st_.current_tex_line = 110
 _st_.inline(73, latex(gcd(4233, 884)))
except:
 _st_.goboom(110)
try:
 _st_.current_tex_line = 111
 _st_.inline(74, latex(gcd(-191, 78)))
except:
 _st_.goboom(111)
try:
 _st_.current_tex_line = 112
 _st_.inline(75, latex(gcd(253, 29)))
except:
 _st_.goboom(112)
try:
 _st_.current_tex_line = 113
 _st_.inline(76, latex(gcd(84, 276)))
except:
 _st_.goboom(113)
try:
 _st_.current_tex_line = 114
 _st_.inline(77, latex(gcd(-92, 876)))
except:
 _st_.goboom(114)
try:
 _st_.current_tex_line = 115
 _st_.inline(78, latex(gcd(147, 637)))
except:
 _st_.goboom(115)
try:
 _st_.current_tex_line = 116
 _st_.inline(79, latex(gcd(266664, 877769)))
except:
 _st_.goboom(116)
try:
 _st_.current_tex_line = 121
 _st_.inline(80, bezpretty(2468,180))
except:
 _st_.goboom(121)
try:
 _st_.current_tex_line = 123
 _st_.inline(81, bezpretty(79,-22))
except:
 _st_.goboom(123)
try:
 _st_.current_tex_line = 125
 _st_.inline(82, bezpretty(45,16))
except:
 _st_.goboom(125)
try:
 _st_.current_tex_line = 127
 _st_.inline(83, bezpretty(-1000,2002))
except:
 _st_.goboom(127)
try:
 _st_.current_tex_line = 151
 _st_.inline(84, bezpretty(13,59))
except:
 _st_.goboom(151)
try:
 _st_.current_tex_line = 152
 _st_.inline(85, latex(inverse_mod(13,59)))
except:
 _st_.goboom(152)
try:
 _st_.current_tex_line = 154
 _st_.inline(86, bezpretty(10,11))
except:
 _st_.goboom(154)
try:
 _st_.current_tex_line = 155
 _st_.inline(87, latex(inverse_mod(10,11)))
except:
 _st_.goboom(155)
try:
 _st_.current_tex_line = 157
 _st_.inline(88, bezpretty(2,193))
except:
 _st_.goboom(157)
try:
 _st_.current_tex_line = 158
 _st_.inline(89, latex(inverse_mod(2,193)))
except:
 _st_.goboom(158)
try:
 _st_.current_tex_line = 160
 _st_.inline(90, bezpretty(6003722857,77695236973))
except:
 _st_.goboom(160)
try:
 _st_.current_tex_line = 161
 _st_.inline(91, latex(inverse_mod(6003722857,77695236973)))
except:
 _st_.goboom(161)
_st_.endofdoc()
